# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#First I determined the avg popularity, danceability, and energy by artist and track. 

SELECT
artist_name
,track_name
,avg(popularity)
,avg(danceability)
,avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

#Next, I wanted to find the top 10 most popular songs.

SELECT track_name, artist_name
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10;

#What is the average danceability of all songs by Doja Cat?

SELECT AVG(danceability)
FROM BIT_DB.Spotifydata
WHERE artist_name='Doja Cat';

#What artist released the shortest song? What is the name of the song? 

SELECT artist_name, track_name
FROM BIT_DB.Spotifydata
ORDER BY duration_ms asc
LIMIT 1;

#What is the average length of songs with a tempo of at least 130 BPM? Display the answer in seconds.

SELECT AVG(duration_ms) / 1000 AS avg_duration_minutes
FROM BIT_DB.Spotifydata
WHERE tempo >= 130.00;

#What artists have multiple songs on this list? How many times are each one of these artists featured?

SELECT COUNT(*) as repetition_count, artist_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name
HAVING COUNT(*) > 1
ORDER BY repetition_count desc;

#What song keys tend to be the loudest?

SELECT AVG(loudness), song_key
FROM BIT_DB.Spotifydata
GROUP BY song_key
ORDER BY AVG(loudness) asc;

#How many hours would it take you to listen to every song on this list?

SELECT ROUND(SUM(duration_ms) / 3.6e+6, 2)
FROM BIT_DB.Spotifydata;
